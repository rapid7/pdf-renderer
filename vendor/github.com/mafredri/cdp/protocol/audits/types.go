// Code generated by cdpgen. DO NOT EDIT.

package audits

// AffectedCookie Information about a cookie that is affected by an inspector
// issue.
type AffectedCookie struct {
	Name           string  `json:"name"`                     // The following three properties uniquely identify a cookie
	Path           string  `json:"path"`                     // No description.
	Domain         string  `json:"domain"`                   // No description.
	SiteForCookies *string `json:"siteForCookies,omitempty"` // Optionally identifies the site-for-cookies, which may be used by the front-end as additional context.
}

// SameSiteCookieExclusionReason
type SameSiteCookieExclusionReason string

// SameSiteCookieExclusionReason as enums.
const (
	SameSiteCookieExclusionReasonNotSet                                 SameSiteCookieExclusionReason = ""
	SameSiteCookieExclusionReasonExcludeSameSiteUnspecifiedTreatedAsLax SameSiteCookieExclusionReason = "ExcludeSameSiteUnspecifiedTreatedAsLax"
	SameSiteCookieExclusionReasonExcludeSameSiteNoneInsecure            SameSiteCookieExclusionReason = "ExcludeSameSiteNoneInsecure"
)

func (e SameSiteCookieExclusionReason) Valid() bool {
	switch e {
	case "ExcludeSameSiteUnspecifiedTreatedAsLax", "ExcludeSameSiteNoneInsecure":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieExclusionReason) String() string {
	return string(e)
}

// SameSiteCookieWarningReason
type SameSiteCookieWarningReason string

// SameSiteCookieWarningReason as enums.
const (
	SameSiteCookieWarningReasonNotSet                                         SameSiteCookieWarningReason = ""
	SameSiteCookieWarningReasonWarnSameSiteUnspecifiedCrossSiteContext        SameSiteCookieWarningReason = "WarnSameSiteUnspecifiedCrossSiteContext"
	SameSiteCookieWarningReasonWarnSameSiteNoneInsecure                       SameSiteCookieWarningReason = "WarnSameSiteNoneInsecure"
	SameSiteCookieWarningReasonWarnSameSiteUnspecifiedLaxAllowUnsafe          SameSiteCookieWarningReason = "WarnSameSiteUnspecifiedLaxAllowUnsafe"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeSecureURLMethodUnsafe   SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeSecureUrlMethodUnsafe"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeSecureURLLax            SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeSecureUrlLax"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeSecureURLStrict         SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeSecureUrlStrict"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeInsecureURLMethodUnsafe SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeInsecureUrlMethodUnsafe"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeInsecureURLLax          SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeInsecureUrlLax"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeInsecureURLStrict       SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeInsecureUrlStrict"
)

func (e SameSiteCookieWarningReason) Valid() bool {
	switch e {
	case "WarnSameSiteUnspecifiedCrossSiteContext", "WarnSameSiteNoneInsecure", "WarnSameSiteUnspecifiedLaxAllowUnsafe", "WarnSameSiteCrossSchemeSecureUrlMethodUnsafe", "WarnSameSiteCrossSchemeSecureUrlLax", "WarnSameSiteCrossSchemeSecureUrlStrict", "WarnSameSiteCrossSchemeInsecureUrlMethodUnsafe", "WarnSameSiteCrossSchemeInsecureUrlLax", "WarnSameSiteCrossSchemeInsecureUrlStrict":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieWarningReason) String() string {
	return string(e)
}

// SameSiteCookieIssueDetails This information is currently necessary, as the
// front-end has a difficult time finding a specific cookie. With this, we can
// convey specific error information without the cookie.
type SameSiteCookieIssueDetails struct {
	CookieWarningReasons   []SameSiteCookieWarningReason   `json:"cookieWarningReasons"`   // No description.
	CookieExclusionReasons []SameSiteCookieExclusionReason `json:"cookieExclusionReasons"` // No description.
}

// AffectedResources
type AffectedResources struct {
	Cookies []AffectedCookie `json:"cookies,omitempty"` // No description.
}

// InspectorIssueCode A unique identifier for the type of issue. Each type may
// use one of the optional fields in InspectorIssueDetails to convey more
// specific information about the kind of issue, and AffectedResources to
// identify resources that are affected by this issue.
type InspectorIssueCode string

// InspectorIssueCode as enums.
const (
	InspectorIssueCodeNotSet              InspectorIssueCode = ""
	InspectorIssueCodeSameSiteCookieIssue InspectorIssueCode = "SameSiteCookieIssue"
)

func (e InspectorIssueCode) Valid() bool {
	switch e {
	case "SameSiteCookieIssue":
		return true
	default:
		return false
	}
}

func (e InspectorIssueCode) String() string {
	return string(e)
}

// InspectorIssueDetails This struct holds a list of optional fields with
// additional information pertaining to the kind of issue. This is useful if
// there is a number of very similar issues that only differ in details.
type InspectorIssueDetails struct {
	SameSiteCookieIssueDetails *SameSiteCookieIssueDetails `json:"sameSiteCookieIssueDetails,omitempty"` // No description.
}

// InspectorIssue An inspector issue reported from the back-end.
type InspectorIssue struct {
	Code      InspectorIssueCode    `json:"code"`      // No description.
	Details   InspectorIssueDetails `json:"details"`   // No description.
	Resources AffectedResources     `json:"resources"` // No description.
}
